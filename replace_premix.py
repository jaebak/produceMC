#!/usr/bin/env python
import argparse
import os, sys

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description='Replaces premix files in configuration with "valid" premix files '
  'in valid_premix_fragment, where valid_premix_fragment is generated by find_valid_premix.py',
  formatter_class=argparse.ArgumentDefaultsHelpFormatter)
  parser.add_argument('-i', '--input', required=True, help="Input configuration filename")
  parser.add_argument('-o', '--output', required=True, help="Output filename that has valid premix files in configuration")
  parser.add_argument('-v', '--valid_premix', required=True, help="File that contains code for valid premix files. Can be generated with find_valid_premix.py, where filename will be valid_premix_fragment")
  args = parser.parse_args()

  # Check arguments
  error = False
  if not os.path.exists(args.input):
    error = True
    print("[Error] "+args.input+" does not exist.")
  if not os.path.exists(args.valid_premix):
    error = True
    print("[Error] "+args.valid_premix+" does not exist.")
  if error:
    sys.exit()


  # Read in premix code
  premix_code = ''
  with open(args.valid_premix) as valid_premix_file:
    for line in valid_premix_file:
      premix_code = line.rstrip()

  output_lines = ''
  with open(args.input) as input_configuration_file:
    for line in input_configuration_file:
      if line.startswith('process.mixData.input.fileNames'):
        output_lines += '#'+line
        output_lines += premix_code + '\n'
      else:
        output_lines += line

  with open(args.output, 'w') as output_configuration_file:
    output_configuration_file.write(output_lines)
    print("Created "+args.output)
